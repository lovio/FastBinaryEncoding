// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: sa.fbe
// Version: 1.7.0.0

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe.h"

namespace sa {
using namespace FBE;
} // namespace sa

namespace FBE {
using namespace ::sa;
} // namespace FBE

#include "fbe_ptr.h"

namespace sa {

enum class Sex
{
    male,
    female,
};

std::ostream& operator<<(std::ostream& stream, Sex value);

#if defined(FMT_VERSION)
} template <> struct fmt::formatter<sa::Sex> : ostream_formatter {}; namespace sa {
#endif

#if defined(LOGGING_PROTOCOL)
CppLogging::Record& operator<<(CppLogging::Record& record, Sex value);
#endif

enum class MyFLags
{
    flag0 = (int32_t)0x00ll,
    flag1 = (int32_t)0x01ll,
    flag2 = (int32_t)0x02ll,
};

std::ostream& operator<<(std::ostream& stream, MyFLags value);

#if defined(FMT_VERSION)
} template <> struct fmt::formatter<sa::MyFLags> : ostream_formatter {}; namespace sa {
#endif

#if defined(LOGGING_PROTOCOL)
CppLogging::Record& operator<<(CppLogging::Record& record, MyFLags value);
#endif

struct Extra : FBE::Base
{
    std::string name;
    std::string detail;
    ::sa::Sex sex;
    ::sa::MyFLags flag;

    size_t fbe_type() const noexcept { return 1; }

    Extra();
    Extra(const std::string& arg_name, const std::string& arg_detail, ::sa::Sex&& arg_sex, ::sa::MyFLags&& arg_flag);
    Extra(const Extra& other) = delete;
    Extra(Extra&& other);
    ~Extra();

    Extra& operator=(const Extra& other) = delete;
    Extra& operator=(Extra&& other);

    bool operator==(const Extra& other) const noexcept;
    bool operator!=(const Extra& other) const noexcept { return !operator==(other); }
    bool operator<(const Extra& other) const noexcept;
    bool operator<=(const Extra& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Extra& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Extra& other) const noexcept { return !operator<(other); }

    std::string string() const { std::stringstream ss; ss << *this; return ss.str(); }

    friend std::ostream& operator<<(std::ostream& stream, const Extra& value);

    void swap(Extra& other) noexcept;
    friend void swap(Extra& value1, Extra& value2) noexcept { value1.swap(value2); }
};

} // namespace sa

template<>
struct std::hash<sa::Extra>
{
    typedef sa::Extra argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace sa {

struct Simple : FBE::Base
{
    std::string name;
    int32_t depth;
    std::array<::sa::Extra, 1> sa;
    ::sa::Sex sex;

    size_t fbe_type() const noexcept { return 2; }

    Simple();
    Simple(const std::string& arg_name, int32_t arg_depth, std::array<::sa::Extra, 1> arg_sa, ::sa::Sex&& arg_sex);
    Simple(const Simple& other) = delete;
    Simple(Simple&& other);
    ~Simple();

    Simple& operator=(const Simple& other) = delete;
    Simple& operator=(Simple&& other);

    bool operator==(const Simple& other) const noexcept;
    bool operator!=(const Simple& other) const noexcept { return !operator==(other); }
    bool operator<(const Simple& other) const noexcept;
    bool operator<=(const Simple& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Simple& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Simple& other) const noexcept { return !operator<(other); }

    std::string string() const { std::stringstream ss; ss << *this; return ss.str(); }

    friend std::ostream& operator<<(std::ostream& stream, const Simple& value);

    void swap(Simple& other) noexcept;
    friend void swap(Simple& value1, Simple& value2) noexcept { value1.swap(value2); }
};

} // namespace sa

template<>
struct std::hash<sa::Simple>
{
    typedef sa::Simple argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace sa {

struct Complex : FBE::Base
{
    std::string name;
    std::optional<::sa::Sex> sex;
    std::optional<::sa::MyFLags> flag;
    std::optional<::sa::Extra> extra;
    std::vector<int64_t> nums;

    size_t fbe_type() const noexcept { return 3; }

    Complex();
    Complex(const std::string& arg_name, std::optional<::sa::Sex> arg_sex, std::optional<::sa::MyFLags> arg_flag, std::optional<::sa::Extra> arg_extra, std::vector<int64_t> arg_nums);
    Complex(const Complex& other) = delete;
    Complex(Complex&& other);
    ~Complex();

    Complex& operator=(const Complex& other) = delete;
    Complex& operator=(Complex&& other);

    bool operator==(const Complex& other) const noexcept;
    bool operator!=(const Complex& other) const noexcept { return !operator==(other); }
    bool operator<(const Complex& other) const noexcept;
    bool operator<=(const Complex& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Complex& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Complex& other) const noexcept { return !operator<(other); }

    std::string string() const { std::stringstream ss; ss << *this; return ss.str(); }

    friend std::ostream& operator<<(std::ostream& stream, const Complex& value);

    void swap(Complex& other) noexcept;
    friend void swap(Complex& value1, Complex& value2) noexcept { value1.swap(value2); }
};

} // namespace sa

template<>
struct std::hash<sa::Complex>
{
    typedef sa::Complex argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace sa {

} // namespace sa
